delimiters "<", ">"
import "io/protostuff/generator/core.stg"
import "io/protostuff/generator/java/generator.stg"
import "io/protostuff/generator/java/enum.stg"
import "io/protostuff/generator/java/schema.stg"
import "io/protostuff/generator/java/oneof.stg"
import "io/protostuff/generator/java/builder.stg"
import "io/protostuff/generator/java/message-base.stg"

message(message) ::= <<
package <message.proto.javaPackage>;

<message:message_body()>
>>

message_body(message) ::= <<
<if(!message.nested)><message:generator_annotation()><endif>
public <if(message.nested)>static <endif>final class <message.javaName>
        <message:message_implements_clause()> {

    private static final <message.javaName> DEFAULT_INSTANCE = newBuilder().build();

    <if(message.message)><if(!message.mapEntry)><message.options:message_options(); separator="\n"><endif><endif>

    <message.fields:field_declaration(); separator="\n">
    private boolean __merge_lock = false;
    <message.javaBitFieldNames:message_bit_field(); separator="\n">
    <message.oneofs:oneof_fields(); separator="\n">

    public <message.javaName>() {
        <message.fields:field_initializer(); separator="\n">
    }

    private <message.javaName>(Builder builder) {
        __merge_lock = true;
    }

    public static Builder newBuilder() {
        return new Builder();
    }

    public static <message.javaName> getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    public static io.protostuff.Schema\<<message.javaName>\> getSchema()
    {
    	return Schema.INSTANCE;
    }

    <message.fields:field_accessors(); separator="\n">

    public <message.javaName> clearAll(){
        <message.fields:clear_all(); separator="\n">
        return this;
    }

    <message.oneofs:oneof_case(); separator="\n">

    @Override
    public io.protostuff.Schema\<<message.javaName>\> cachedSchema() {
        return Schema.INSTANCE;
    }

    <equals(message=message, builder=false)>

    <message:hash_code()>

    <message:to_string()>

    <message:schema()>

    <message:builder()>

    <message.messages:message_body(); separator="\n">
    
    <message.enums:enum_body(); separator="\n">

    <message.oneofs:one_of(); separator="\n">
}
>>

message_implements_clause(message) ::= <%
implements io.protostuff.Message\<<message.javaName>>
%>

message_bit_field(name) ::= <<
private int <name>;
>>

message_options(options) ::= <<
<options>
>>

clear_all(field) ::= <<
<if(!field.oneofPart)>this.<field.javaCleanerName>();<endif>
>>

field_accessors(field) ::= <<
<if(field.oneofPart)>
<if(field.type.enum)>
public <field.javaType> <field.javaGetterName>() {
    if (<field.oneof.javaCaseFieldName> == <field.oneof.javaName>.<field.javaOneofConstantName>) {
        return <field.javaType>.valueOf((int) <field.oneof.javaFieldName>);
    }
    return <field.javaDefaultValue>;
}


public <message.javaName> <field.javaSetterName>(<field.javaType> value) {
    <check_field_value_is_not_null(field=field, var="value")>
    <check_field_value_is_not_unrecognized(field=field, var="value")>
    this.<field.oneof.javaFieldName> = value.getNumber();
    this.<field.oneof.javaCaseFieldName> = <field.oneof.javaName>.<field.javaOneofConstantName>;
    return this;
}

public int <field.javaEnumValueGetterName>() {
    if (<field.oneof.javaCaseFieldName> == <field.oneof.javaName>.<field.javaOneofConstantName>) {
        return (int) <field.oneof.javaFieldName>;
    }
    return 0;
}

public <message.javaName> <field.javaEnumValueSetterName>(int value) {
    this.<field.oneof.javaFieldName> = value;
    this.<field.oneof.javaCaseFieldName> = <field.oneof.javaName>.<field.javaOneofConstantName>;
    return this;
}
<else>
public <field.javaType> <field.javaGetterName>() {
    if (<field.oneof.javaCaseFieldName> == <field.oneof.javaName>.<field.javaOneofConstantName>) {
        return (<field.javaType>) <field.oneof.javaFieldName>;
    }
    return <field.javaDefaultValue>;
}

public <message.javaName> <field.javaSetterName>(<field.javaType> value) {
    <check_field_value_is_not_null(field=field, var="value")>
    this.<field.oneof.javaFieldName> = value;
    this.<field.oneof.javaCaseFieldName> = <field.oneof.javaName>.<field.javaOneofConstantName>;
    return this;
}
<endif>

public <field.parent.javaName> <field.javaWitherName>(<field.javaType> value) {
    return <message.javaName>.newBuilder()
        .mergeFrom(this)
        .<field.javaSetterName>(value)
        .build();
}

public boolean <field.javaHasMethodName>() {
    return <field.oneof.javaCaseFieldName> == <field.oneof.javaName>.<field.javaOneofConstantName>;
}
<elseif(field.map)>
public <field.javaMapType> <field.javaMapGetterName>() {
    return <field.javaName>;
}

public <message.javaName> <field.javaMapAdderName>(<field.javaMapKeyType> key, <field.javaMapValueType> value) {
    if (key == null) {
        throw new NullPointerException("Cannot set <field.parent.javaName>#<field.javaName> - map key is null");
    }
    if (value == null) {
        throw new NullPointerException("Cannot set <field.parent.javaName>#<field.javaName> - map value is null");
    }
    <field:ensure_mutable()>
    this.<field.javaName>.put(key, value);
    return this;
}

public <message.javaName> <field.javaMapAddAllName>(java.util.Map\<<field.javaMapKeyType>, <field.javaMapValueType>\> map) {
    if (map == null) {
        throw new NullPointerException("Cannot set <field.parent.javaName>#<field.javaName> to null");
    }
    <field:ensure_mutable()>
    this.<field.javaName>.putAll(map);
    return this;
}

public <message.javaName> <field.javaCleanerName>() {
    this.<field.javaName> = java.util.Collections.emptyMap();
    <field.javaBitFieldName> &= ~<field.javaBitFieldMask>;
    return this;
}

public int <field.javaRepeatedGetCountMethodName>() {
    return <field.javaName>.size();
}

public <field.javaMapValueType> <field.javaMapGetByKeyMethodName>(<field.javaMapKeyType> key) {
    return <field.javaName>.get(key);
}

public <field.parent.javaName> <field.javaWitherName>(<field.javaMapType> value) {
    return <message.javaName>.newBuilder()
        .mergeFrom(this)
        .<field.javaCleanerName>()
        .<field.javaMapAddAllName>(value)
        .build();
}
<elseif(field.repeated)>
<if(field.type.enum)>
public <field.javaRepeatedType> <field.javaRepeatedGetterName>() {
    return new io.protostuff.ListAdapter\<>(<field.javaName>, <field.javaType>::valueOf);
}

public <field.javaType> <field.javaRepeatedGetByIndexMethodName>(int index) {
    return <field.javaType>.valueOf(<field.javaName>.get(index));
}

public java.util.List\<Integer> <field.javaRepeatedEnumValueGetterName>() {
    return <field.javaName>;
}

public int <field.javaRepeatedEnumValueGetterByIndexName>(int index) {
    return <field.javaName>.get(index);
}

public int <field.javaRepeatedGetCountMethodName>() {
    return <field.javaName>.size();
}

public <message.javaName> <field.javaRepeatedSetterName>(int index, <field.javaType> value) {
    <check_field_value_is_not_null(field=field, var="value")>
    <check_field_value_is_not_unrecognized(field=field, var="value")>
    <field:ensure_mutable()>
    this.<field.javaName>.set(index, value.getNumber());
    return this;
}

public <message.javaName> <field.javaRepeatedEnumValueSetterName>(int index, int value) {
    <field:ensure_mutable()>
    this.<field.javaName>.set(index, value);
    return this;
}

public <message.javaName> <field.javaRepeatedAdderName>(<field.javaType> value) {
    <check_field_value_is_not_null(field=field, var="value")>
    <check_field_value_is_not_unrecognized(field=field, var="value")>
    <field:ensure_mutable()>
    this.<field.javaName>.add(value.getNumber());
    return this;
}

public <message.javaName> <field.javaRepeatedEnumValueAdderName>(int value) {
    <field:ensure_mutable()>
    this.<field.javaName>.add(value);
    return this;
}

public <message.javaName> <field.javaRepeatedAddAllName>(<field.javaIterableType> values) {
    if (values == null) {
        throw new NullPointerException("Cannot set <field.parent.javaName>#<field.javaName> to null");
    }
    <field:ensure_mutable()>
    for (final <field.javaWrapperType> value : values) {
        if (value == null) {
           throw new NullPointerException("Cannot set <field.parent.javaName>#<field.javaName> to null");
        }
        <check_field_value_is_not_unrecognized(field=field, var="value")>
        this.<field.javaName>.add(value.getNumber());
    }
    return this;
}

public <message.javaName> <field.javaRepeatedEnumValueAddAllName>(java.lang.Iterable\<Integer> values) {
    if (values == null) {
        throw new NullPointerException("Cannot set <field.parent.javaName>#<field.javaName> to null");
    }
    <field:ensure_mutable()>
    for (Integer value : values) {
        if (value == null) {
           throw new NullPointerException("Cannot set <field.parent.javaName>#<field.javaName> to null");
        }
        this.<field.javaName>.add(value);
    }
    return this;
}

public <message.javaName> <field.javaCleanerName>() {
    this.<field.javaName> = java.util.Collections.emptyList();
    <field.javaBitFieldName> &= ~<field.javaBitFieldMask>;
    return this;
}

public <field.parent.javaName> <field.javaWitherName>(<field.javaRepeatedType> value) {
    return <message.javaName>.newBuilder()
        .mergeFrom(this)
        .<field.javaCleanerName>()
        .<field.javaRepeatedAddAllName>(value)
        .build();
}
<else>
public <field.javaRepeatedType> <field.javaRepeatedGetterName>() {
    return <field.javaName>;
}

public <message.javaName> <field.javaRepeatedSetterName>(int index, <field.javaType> value) {
    <check_field_value_is_not_null(field=field, var="value")>
    <field:ensure_mutable()>
    this.<field.javaName>.set(index, value);
    return this;
}

public <message.javaName> <field.javaRepeatedAdderName>(<field.javaType> value) {
    <check_field_value_is_not_null(field=field, var="value")>
    <field:ensure_mutable()>
    this.<field.javaName>.add(value);
    return this;
}

public <message.javaName> <field.javaRepeatedAddAllName>(<field.javaIterableType> values) {
    if (values == null) {
        throw new NullPointerException("Cannot set <field.parent.javaName>#<field.javaName> to null");
    }
    <field:ensure_mutable()>
    for (final <field.javaWrapperType> value : values) {
        if (value == null) {
           throw new NullPointerException("Cannot set <field.parent.javaName>#<field.javaName> to null");
        }
        this.<field.javaName>.add(value);
    }
    return this;
}

public <message.javaName> <field.javaCleanerName>() {
    this.<field.javaName> = java.util.Collections.emptyList();
    <field.javaBitFieldName> &= ~<field.javaBitFieldMask>;
    return this;
}

public int <field.javaRepeatedGetCountMethodName>() {
    return <field.javaName>.size();
}

public <field.javaType> <field.javaRepeatedGetByIndexMethodName>(int index) {
    return <field.javaName>.get(index);
}

public <field.parent.javaName> <field.javaWitherName>(<field.javaRepeatedType> value) {
    return <message.javaName>.newBuilder()
        .mergeFrom(this)
        .<field.javaCleanerName>()
        .<field.javaRepeatedAddAllName>(value)
        .build();
}
<endif>
<elseif(field.type.enum)>
public <field.javaType> <field.javaGetterName>() {
    return <field.javaType>.valueOf(<field.javaName>);
}

public int <field.javaEnumValueGetterName>() {
    return <field.javaName>;
}

public <message.javaName> <field.javaSetterName>(<field.javaType> value) {
    <check_field_value_is_not_null(field=field, var="value")>
    <check_field_value_is_not_unrecognized(field=field, var="value")>
    this.<field.javaName> = value.getNumber();
    <field.javaBitFieldName> |= <field.javaBitFieldMask>;
    return this;
}

public <message.javaName> <field.javaEnumValueSetterName>(int value) {
    this.<field.javaName> = value;
    <field.javaBitFieldName> |= <field.javaBitFieldMask>;
    return this;
}

public <message.javaName> <field.javaCleanerName>() {
    this.<field.javaName> = 0;
    <field.javaBitFieldName> &= ~<field.javaBitFieldMask>;
    return this;
}

public boolean <field.javaHasMethodName>() {
    return (<field.javaBitFieldName> & <field.javaBitFieldMask>) == <field.javaBitFieldMask>;
}

public <field.parent.javaName> <field.javaWitherName>(<field.javaType> value) {
    return <message.javaName>.newBuilder()
        .mergeFrom(this)
        .<field.javaSetterName>(value)
        .build();
}
<else>
public <field.javaType> <field.javaGetterName>() {
    return <field.javaName>;
}

public <message.javaName> <field.javaSetterName>(<field.javaType> value) {
    <check_field_value_is_not_null(field=field, var="value")>
    this.<field.javaName> = value;
    <field.javaBitFieldName> |= <field.javaBitFieldMask>;
    return this;
}

public <message.javaName> <field.javaCleanerName>() {
    this.<field.javaName> = <field.javaDefaultValue>;
    <field.javaBitFieldName> &= ~<field.javaBitFieldMask>;
    return this;
}

public boolean <field.javaHasMethodName>() {
    return (<field.javaBitFieldName> & <field.javaBitFieldMask>) == <field.javaBitFieldMask>;
}

public <field.parent.javaName> <field.javaWitherName>(<field.javaType> value) {
    return <message.javaName>.newBuilder()
        .mergeFrom(this)
        .<field.javaSetterName>(value)
        .build();
}
<endif>
>>

ensure_mutable(field) ::= <<
if(!((<field.javaBitFieldName> & <field.javaBitFieldMask>) == <field.javaBitFieldMask>)) {
<if(field.map)>
    this.<field.javaName> = new java.util.HashMap\<>();
<elseif(field.repeated)>
    this.<field.javaName> = new java.util.ArrayList\<>();
<endif>
    <field.javaBitFieldName> |= <field.javaBitFieldMask>;
}
>>

check_field_value_is_not_null(field, var) ::= <<
<if(field.type.message || field.type.enum || field.type.scalar && field.javaIsScalarNullableType)>
if (<var> == null) {
    throw new NullPointerException("Cannot set <field.parent.javaName>#<field.javaName> to null");
}
<endif>
>>

check_field_value_is_not_unrecognized(field, var) ::= <<
<if(field.type.enum)>
if (<var> == <field.javaType>.UNRECOGNIZED) {
    throw new IllegalArgumentException("Cannot set <field.parent.javaName>#<field.javaName> to UNRECOGNIZED");
}
<endif>
>>

field_toString_part(field) ::= <<
<if(field.repeated)>
if (!<field.javaName>.isEmpty()) {
<else>
if (<field.javaHasMethodName>()) {
<endif>
    parts.add(<field.toStringPart>);
}
>>
