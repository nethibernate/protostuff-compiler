delimiters "<", ">"

import "io/protostuff/generator/java/message-base.stg"

builder(message) ::= <<
public static final class Builder <message:message_builder_implements_clause()> {

    <message.fields:field_declaration(); separator="\n">
    <message.javaBitFieldNames:message_bit_field(); separator="\n">
    <message.oneofs:oneof_fields(); separator="\n">

    private Builder() {
        <message.fields:field_initializer(); separator="\n">
    }

    public Builder mergeFrom(<message.javaName> instance) {
        <message.fields:builder_merge_from(); separator="\n">
        return this;
    }

    <message.fields:builder_field_accessors(); separator="\n">

    public Builder clearAll(){
        <message.fields:clear_all(); separator="\n">
        return this;
    }

    <message.oneofs:oneof_case(); separator="\n">

    <message.oneofs:oneof_cleaner(); separator="\n">

    <equals(message=message, builder=true)>

    <message:hash_code()>

    <message:to_string()>

    public <message.javaName> build() {
        <message.javaFullName> result = new <message.javaFullName>();
        <message.javaBitFieldNames:copy_bit_field(); separator="\n">
        <message.fields:copy_field(); separator="\n">
        <message.oneofs:copy_oneof_field(); separator="\n">
        return result;
    }

}
>>

message_builder_implements_clause(message) ::= <%
%>

builder_merge_from(field) ::= <<
<if(field.map)>
this.<field.javaMapAddAllName>(instance.<field.javaMapGetterName>());
<elseif(field.repeated)>
this.<field.javaRepeatedAddAllName>(instance.<field.javaRepeatedGetterName>());
<else>
if (instance.<field.javaHasMethodName>()) {
    this.<field.javaSetterName>(instance.<field.javaGetterName>());
}
<endif>
>>

oneof_cleaner(oneOf) ::= <<
public Builder <oneOf.javaCaseCleanerName>() {
    <oneOf.javaCaseFieldName> = <oneOf.javaName>.<oneOf.javaNotSetConstantName>;
    <oneOf.javaFieldName> = null;
    return this;
}
>>

copy_bit_field(name) ::= <<
result.<name> = <name>;
>>

copy_field(field) ::= <%
<if(field.oneofPart)>
<elseif(field.map)>
result.<field.javaName> = java.util.Collections.unmodifiableMap(this.<field.javaName>);
<elseif(field.repeated)>
result.<field.javaName> = java.util.Collections.unmodifiableList(this.<field.javaName>);
<else>
result.<field.javaName> = this.<field.javaName>;
<endif>
%>

copy_oneof_field(oneOf) ::= <<
result.<oneOf.javaCaseFieldName> = this.<oneOf.javaCaseFieldName>;
result.<oneOf.javaFieldName> = this.<oneOf.javaFieldName>;
>>

builder_factory_method(message) ::= <<
public static Builder newBuilder() {
    return new Builder();
}
>>

clear_all(field) ::= <<
<if(!field.oneofPart)>this.<field.javaCleanerName>();<endif>
>>

builder_field_accessors(field) ::= <<
<if(field.oneofPart)>
<if(field.type.enum)>
public <field.javaType> <field.javaGetterName>() {
    if (<field.oneof.javaCaseFieldName> == <field.oneof.javaName>.<field.javaOneofConstantName>) {
        return <field.javaType>.valueOf((int) <field.oneof.javaFieldName>);
    }
    return <field.javaDefaultValue>;
}


public Builder <field.javaSetterName>(<field.javaType> value) {
    <check_field_value_is_not_null(field=field, var="value")>
    <check_field_value_is_not_unrecognized(field=field, var="value")>
    this.<field.oneof.javaFieldName> = value.getNumber();
    this.<field.oneof.javaCaseFieldName> = <field.oneof.javaName>.<field.javaOneofConstantName>;
    return this;
}

public int <field.javaEnumValueGetterName>() {
    if (<field.oneof.javaCaseFieldName> == <field.oneof.javaName>.<field.javaOneofConstantName>) {
        return (int) <field.oneof.javaFieldName>;
    }
    return 0;
}

public Builder <field.javaEnumValueSetterName>(int value) {
    this.<field.oneof.javaFieldName> = value;
    this.<field.oneof.javaCaseFieldName> = <field.oneof.javaName>.<field.javaOneofConstantName>;
    return this;
}
<else>
public <field.javaType> <field.javaGetterName>() {
    if (<field.oneof.javaCaseFieldName> == <field.oneof.javaName>.<field.javaOneofConstantName>) {
        return (<field.javaType>) <field.oneof.javaFieldName>;
    }
    return <field.javaDefaultValue>;
}

public Builder <field.javaSetterName>(<field.javaType> value) {
    <check_field_value_is_not_null(field=field, var="value")>
    this.<field.oneof.javaFieldName> = value;
    this.<field.oneof.javaCaseFieldName> = <field.oneof.javaName>.<field.javaOneofConstantName>;
    return this;
}
<endif>

public boolean <field.javaHasMethodName>() {
    return <field.oneof.javaCaseFieldName> == <field.oneof.javaName>.<field.javaOneofConstantName>;
}
<elseif(field.map)>
public <field.javaMapType> <field.javaMapGetterName>() {
    return <field.javaName>;
}

public Builder <field.javaMapAdderName>(<field.javaMapKeyType> key, <field.javaMapValueType> value) {
    if (key == null) {
        throw new NullPointerException("Cannot set <field.parent.javaName>#<field.javaName> - map key is null");
    }
    if (value == null) {
        throw new NullPointerException("Cannot set <field.parent.javaName>#<field.javaName> - map value is null");
    }
    <field:ensure_mutable()>
    this.<field.javaName>.put(key, value);
    return this;
}

public Builder <field.javaMapAddAllName>(java.util.Map\<<field.javaMapKeyType>, <field.javaMapValueType>\> map) {
    if (map == null) {
        throw new NullPointerException("Cannot set <field.parent.javaName>#<field.javaName> to null");
    }
    <field:ensure_mutable()>
    this.<field.javaName>.putAll(map);
    return this;
}

public Builder <field.javaCleanerName>() {
    this.<field.javaName> = java.util.Collections.emptyMap();
    <field.javaBitFieldName> &= ~<field.javaBitFieldMask>;
    return this;
}

public int <field.javaRepeatedGetCountMethodName>() {
    return <field.javaName>.size();
}

public <field.javaMapValueType> <field.javaMapGetByKeyMethodName>(<field.javaMapKeyType> key) {
    return <field.javaName>.get(key);
}
<elseif(field.repeated)>
<if(field.type.enum)>
public <field.javaType> <field.javaRepeatedGetByIndexMethodName>(int index) {
    return <field.javaType>.valueOf(<field.javaName>.get(index));
}

public <field.javaRepeatedType> <field.javaRepeatedGetterName>() {
    return new io.protostuff.ListAdapter\<>(<field.javaName>, <field.javaType>::valueOf);
}

public int <field.javaRepeatedGetCountMethodName>() {
    return <field.javaName>.size();
}

public java.util.List\<Integer> <field.javaRepeatedEnumValueGetterName>() {
    return <field.javaName>;
}

public int <field.javaRepeatedEnumValueGetterByIndexName>(int index) {
    return <field.javaName>.get(index);
}

public Builder <field.javaRepeatedSetterName>(int index, <field.javaType> value) {
    <check_field_value_is_not_null(field=field, var="value")>
    <check_field_value_is_not_unrecognized(field=field, var="value")>
    <field:ensure_mutable()>
    this.<field.javaName>.set(index, value.getNumber());
    return this;
}

public Builder <field.javaRepeatedEnumValueSetterName>(int index, int value) {
    <field:ensure_mutable()>
    this.<field.javaName>.set(index, value);
    return this;
}

public Builder <field.javaRepeatedAdderName>(<field.javaType> value) {
    <check_field_value_is_not_null(field=field, var="value")>
    <check_field_value_is_not_unrecognized(field=field, var="value")>
    <field:ensure_mutable()>
    this.<field.javaName>.add(value.getNumber());
    return this;
}

public Builder <field.javaRepeatedEnumValueAdderName>(int value) {
    <field:ensure_mutable()>
    this.<field.javaName>.add(value);
    return this;
}

public Builder <field.javaRepeatedAddAllName>(<field.javaIterableType> values) {
    if (values == null) {
        throw new NullPointerException("Cannot set <field.parent.javaName>#<field.javaName> to null");
    }
    <field:ensure_mutable()>
    for (final <field.javaWrapperType> value : values) {
        if (value == null) {
           throw new NullPointerException("Cannot set <field.parent.javaName>#<field.javaName> to null");
        }
        <check_field_value_is_not_unrecognized(field=field, var="value")>
        this.<field.javaName>.add(value.getNumber());
    }
    return this;
}

public Builder <field.javaRepeatedEnumValueAddAllName>(java.lang.Iterable\<Integer> values) {
    if (values == null) {
        throw new NullPointerException("Cannot set <field.parent.javaName>#<field.javaName> to null");
    }
    <field:ensure_mutable()>
    for (Integer value : values) {
        if (value == null) {
           throw new NullPointerException("Cannot set <field.parent.javaName>#<field.javaName> to null");
        }
        this.<field.javaName>.add(value);
    }
    return this;
}

public Builder <field.javaCleanerName>() {
    this.<field.javaName> = java.util.Collections.emptyList();
    <field.javaBitFieldName> &= ~<field.javaBitFieldMask>;
    return this;
}

<else>
public <field.javaRepeatedType> <field.javaRepeatedGetterName>() {
    return <field.javaName>;
}

public Builder <field.javaRepeatedSetterName>(int index, <field.javaType> value) {
    <check_field_value_is_not_null(field=field, var="value")>
    <field:ensure_mutable()>
    this.<field.javaName>.set(index, value);
    return this;
}

public Builder <field.javaRepeatedAdderName>(<field.javaType> value) {
    <check_field_value_is_not_null(field=field, var="value")>
    <field:ensure_mutable()>
    this.<field.javaName>.add(value);
    return this;
}

public Builder <field.javaRepeatedAddAllName>(<field.javaIterableType> values) {
    if (values == null) {
        throw new NullPointerException("Cannot set <field.parent.javaName>#<field.javaName> to null");
    }
    <field:ensure_mutable()>
    for (final <field.javaWrapperType> value : values) {
        if (value == null) {
           throw new NullPointerException("Cannot set <field.parent.javaName>#<field.javaName> to null");
        }
        this.<field.javaName>.add(value);
    }
    return this;
}

public Builder <field.javaCleanerName>() {
    this.<field.javaName> = java.util.Collections.emptyList();
    <field.javaBitFieldName> &= ~<field.javaBitFieldMask>;
    return this;
}

public int <field.javaRepeatedGetCountMethodName>() {
    return <field.javaName>.size();
}

public <field.javaType> <field.javaRepeatedGetByIndexMethodName>(int index) {
    return <field.javaName>.get(index);
}
<endif>
<elseif(field.type.enum)>
public <field.javaType> <field.javaGetterName>() {
    return <field.javaType>.valueOf(<field.javaName>);
}

public int <field.javaEnumValueGetterName>() {
    return <field.javaName>;
}

public Builder <field.javaSetterName>(<field.javaType> value) {
    <check_field_value_is_not_null(field=field, var="value")>
    <check_field_value_is_not_unrecognized(field=field, var="value")>
    this.<field.javaName> = value.getNumber();
    <field.javaBitFieldName> |= <field.javaBitFieldMask>;
    return this;
}

public Builder <field.javaEnumValueSetterName>(int value) {
    this.<field.javaName> = value;
    <field.javaBitFieldName> |= <field.javaBitFieldMask>;
    return this;
}

public Builder <field.javaCleanerName>() {
    this.<field.javaName> = 0;
    <field.javaBitFieldName> &= ~<field.javaBitFieldMask>;
    return this;
}

public boolean <field.javaHasMethodName>() {
    return (<field.javaBitFieldName> & <field.javaBitFieldMask>) == <field.javaBitFieldMask>;
}
<else>
public <field.javaType> <field.javaGetterName>() {
    return <field.javaName>;
}

public Builder <field.javaSetterName>(<field.javaType> value) {
    <check_field_value_is_not_null(field=field, var="value")>
    this.<field.javaName> = value;
    <field.javaBitFieldName> |= <field.javaBitFieldMask>;
    return this;
}

public Builder <field.javaCleanerName>() {
    this.<field.javaName> = <field.javaDefaultValue>;
    <field.javaBitFieldName> &= ~<field.javaBitFieldMask>;
    return this;
}

public boolean <field.javaHasMethodName>() {
    return (<field.javaBitFieldName> & <field.javaBitFieldMask>) == <field.javaBitFieldMask>;
}
<endif>
>>

ensure_mutable(field) ::= <<
if(!((<field.javaBitFieldName> & <field.javaBitFieldMask>) == <field.javaBitFieldMask>)) {
<if(field.map)>
    this.<field.javaName> = new java.util.HashMap\<>();
<elseif(field.repeated)>
    this.<field.javaName> = new java.util.ArrayList\<>();
<endif>
    <field.javaBitFieldName> |= <field.javaBitFieldMask>;
}
>>

check_field_value_is_not_null(field, var) ::= <<
<if(field.type.message || field.type.enum || field.type.scalar && field.javaIsScalarNullableType)>
if (<var> == null) {
    throw new NullPointerException("Cannot set <field.parent.javaName>#<field.javaName> to null");
}
<endif>
>>

check_field_value_is_not_unrecognized(field, var) ::= <<
<if(field.type.enum)>
if (<var> == <field.javaType>.UNRECOGNIZED) {
    throw new IllegalArgumentException("Cannot set <field.parent.javaName>#<field.javaName> to UNRECOGNIZED");
}
<endif>
>>
